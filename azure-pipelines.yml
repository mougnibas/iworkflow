# Copyright (c) 2020 Yoann MOUGNIBAS
# 
# This file is part of MusicWorkflow.
# 
# MusicWorkflow is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# MusicWorkflow is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with MusicWorkflow.  If not, see <https://www.gnu.org/licenses/>.

# Do NOT build branches : Build only pull requests (see below)
trigger: none

# Only build pull requests on "master" and "feature/*" target branch
pr:
- master
- feature/*

# Use this Microsoft based agent (Windows Server 2019)
pool:
  vmImage: 'windows-2019'

# Build name
name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Build variables
variables:
  BuildConfiguration: 'Release'

# Pipeline's stages
# Only one actually : Build
stages:

  # "Build" stage
  # This stage will build/test/checkstyle/coverage/sonar the sources (and will wait for the quality gate to be published)
  - stage : Setup, restore, build, test and analyse
    jobs:
      - job: build
        steps:

          # Install a given version of dotnet SDK
          # See available versions at https://github.com/dotnet/core/blob/master/release-notes/releases-index.json
          - task: UseDotNet@2
            name: 'sdk_install'
            inputs:
              packageType: sdk
              version: 5.0.100
              installationPath: $(Agent.ToolsDirectory)/dotnet

          # Use ".NET Core CLI" task to restore
          # It is recommended that an explicit 'dotnet restore' step be used to restore packages.
          - task: DotNetCoreCLI@2
            name: 'dotnet_restore'
            inputs:
              command: 'restore'

          # Sonar : Prepare Analysis Configuration
          - task: SonarCloudPrepare@1
            name: 'sonar_prepare'
            inputs:
              SonarCloud: 'AzureDevOps-MusicWorkFlow-ServiceConnection'
              organization: 'mougnibas-github'
              scannerMode: 'MSBuild'
              projectKey: 'music-workflow'
              projectName: 'A music tools and workflow management'
              extraProperties: |
                sonar.cs.opencover.reportsPaths=$(System.DefaultWorkingDirectory)/test/aggregate/TestResults/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

          # Use ".NET Core CLI" task to build
          - task: DotNetCoreCLI@2
            name: 'dotnet_build'
            inputs:
              command: 'build'
              arguments: '--configuration $(BuildConfiguration)'

          # Use ".NET Core CLI" task to invoke "test" command
          # Test results will be automatically published (discovered as ".trx" file format)
          # Also collect the code coverage, even if pipeline don't seem to do anything with it.
          - task: DotNetCoreCLI@2
            name: 'dotnet_test'
            inputs:
              command: 'test'
              arguments: '--configuration $(BuildConfiguration) --logger trx'

          # Cobertura Code Coverage results need to be published using dedicated "Publish Code Coverage Results" task
          - task: PublishCodeCoverageResults@1
            name: 'coverage_publish'
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/test/aggregate/TestResults/coverage.cobertura.xml'

          # Sonar : Run Code Analysis
          - task: SonarCloudAnalyze@1
            name: 'sonar_run'

          # Sonar : Publish Quality Gate Result
          - task: SonarCloudPublish@1
            name: 'sonar_publish'
            inputs:
              pollingTimeoutSec: '300'
