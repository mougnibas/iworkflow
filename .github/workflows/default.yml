# Copyright (c) 2020 Yoann MOUGNIBAS
# 
# This file is part of MusicWorkflow.
# 
# MusicWorkflow is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# MusicWorkflow is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with MusicWorkflow.  If not, see <https://www.gnu.org/licenses/>.

#
# Reference : https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
#

# The name of the workflow.
name: Default continuous integration

# This C.I. will only run on pull requests targeting "master" and "feature/*" branches.
# No C.I. will run on push on branches if they are not under a P.R. workflow.
on:
  pull_request:
    branches:
      - master
      - feature/*

# Use some environment variables
# Reference : https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet#environment-variables
env:
  DOTNET_NOLOGO: yes              # Disable .NET welcome and telemetry messages displayed on first ru
  DOTNET_CLI_TELEMETRY_OPTOUT: no # Disable .NET data tools usage collected and sent to Microsoft

# This following jobs will run the following commands on solution :
# - 'dotnet restore'
# - 'dotnet build --configuration Release'
# - 'dotnet test  --configuration Release --logger trx'
# Linux build install a .NET 5 SDK (while windows build already have it).
# Linux build can (and will) run a SonarCloud scan, while the windows build cannot.
jobs:

  linux-build:
  
    # Use a "Ubuntu 20.04" (Github-hosted) runner.
    # Reference : https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#github-hosted-runners
    name: Linux build
    runs-on: ubuntu-20.04

    # Use a classic "checkout/restore/build/test" workflow.
    steps:

      # Use this action to checkout the current git repository.
      # Default value use "${{ github.repository }}" as repository
      # and the event SHA-1 as ref.
      # Reference documentation : https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v2

      # Install .NET 5 SDK
      # Reference : https://github.com/actions/setup-dotnet#usage
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      # Restore the solution.
      - name: .NET 5 SDK restore command
        run:  dotnet restore

      # Build the solution.
      - name: .NET 5 SDK build command
        run:  dotnet build --configuration 'Release'

      # Test the solution.
      - name: .NET 5 SDK test command
        run:  dotnet test --configuration 'Release' --logger trx

  windows-build:

    # Use a "Windows Server 2019" (Github-hosted) runner.
    # Reference : https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#github-hosted-runners
    name: Windows build
    runs-on: windows-2019

    # Use a classic "checkout/restore/build/test/sonar" workflow.
    steps:

      # Install a specific Java SDK (LTS).
      # Use version 11.0.
      # Defaults values are JDK package and x64 architecture.
      # Reference : https://github.com/marketplace/actions/setup-java-jdk#basic
      - uses: actions/setup-java@v1
        with:
          java-version: '11.0.x'

      # Use this action to checkout the current git repository.
      # Default value use "${{ github.repository }}" as repository
      # and the event SHA-1 as ref.
      # Override the "fetch-depth" configuration from default 1 to 0.
      # Reference documentation : https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN  }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin -k:"music-workflow" -o:"mougnibas-github" -d:sonar.login="${{ secrets.SONAR_TOKEN }}" -d:sonar.host.url="https://sonarcloud.io" -d:sonar.cs.opencover.reportsPaths="test/aggregate/TestResults/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="test/aggregate/TestResults/*.trx"
          dotnet restore
          dotnet build --configuration 'Release'
          dotnet test --configuration 'Release' --logger trx
          .\.sonar\scanner\dotnet-sonarscanner end -d:sonar.login="${{ secrets.SONAR_TOKEN }}"
