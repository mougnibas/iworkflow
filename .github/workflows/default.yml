# Copyright (c) 2020 Yoann MOUGNIBAS
# 
# This file is part of MusicWorkflow.
# 
# MusicWorkflow is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# MusicWorkflow is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with MusicWorkflow.  If not, see <https://www.gnu.org/licenses/>.

#
# Reference : https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
#

# The name of the workflow.
name: Default continuous integration

# This C.I. will only run on pull requests targeting "master" and "feature/*" branches.
# No C.I. will run on push on branches if they are not under a P.R. workflow.
on:
  pull_request:
    branches:
      - master
      - feature/*

# Use some environment variables
# Reference : https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet#environment-variables
env:
  DOTNET_NOLOGO: yes              # Disable .NET welcome and telemetry messages displayed on first ru
  DOTNET_CLI_TELEMETRY_OPTOUT: no # Disable .NET data tools usage collected and sent to Microsoft

# This following builds will run the following commands on solution :
# - 'dotnet restore'
# - 'dotnet build --configuration Release'
# - 'dotnet test  --configuration Release --logger trx'
# Linux build can (and will) run a SonarCloud scan, while the windows build cannot. 
jobs:

  linux-build:

    # Use a "Ubuntu 20.04" (Github-hosted) runner.
    # Reference : https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#github-hosted-runners
    runs-on: ubuntu-20.04

    # Use a classic "checkout/restore/build/test/sonar" workflow.
    steps:

      # Use this action to checkout the current git repository.
      # Default value use "${{ github.repository }}" as repository
      # and the event SHA-1 as ref.
      # Reference documentation : https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v2

      # Restore the solution.
      - name: .NET 5 SDK restore command
        run:  dotnet restore

      # Build the solution.
      - name: .NET 5 SDK build command
        run:  dotnet build --configuration 'Release'

      # Test the solution.
      - name: .NET 5 SDK test command
        run:  dotnet test --configuration 'Release' --logger trx

      # Sonar scan
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN  }}

  windows-build:

    # Use a "Windows Server 2019" (Github-hosted) runner.
    # Reference : https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#github-hosted-runners
    runs-on: windows-2019

    # Use a classic "checkout/restore/build/test/sonar" workflow.
    steps:

      # Use this action to checkout the current git repository.
      # Default value use "${{ github.repository }}" as repository
      # and the event SHA-1 as ref.
      # Reference documentation : https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v2

      # Restore the solution.
      - name: .NET 5 SDK restore command
        run:  dotnet restore

      # Build the solution.
      - name: .NET 5 SDK build command
        run:  dotnet build --configuration 'Release'

      # Test the solution.
      - name: .NET 5 SDK test command
        run:  dotnet test --configuration 'Release' --logger trx
